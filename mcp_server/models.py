# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:03:28+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Administrator(BaseModel):
    pass


class AnonymousUser(BaseModel):
    pass


class Anyone(BaseModel):
    pass


class Type(Enum):
    UNSPECIFIED_REFERENCE_TYPE = 'UNSPECIFIED_REFERENCE_TYPE'
    LINK = 'LINK'
    DISCUSS = 'DISCUSS'


class ApplicationReference(BaseModel):
    type: Optional[Type] = Field(
        None, description='The reference type corresponding to this event.'
    )


class Type1(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    LABEL_ADDED = 'LABEL_ADDED'
    LABEL_REMOVED = 'LABEL_REMOVED'
    LABEL_FIELD_VALUE_CHANGED = 'LABEL_FIELD_VALUE_CHANGED'
    LABEL_APPLIED_BY_ITEM_CREATE = 'LABEL_APPLIED_BY_ITEM_CREATE'


class Subtype(Enum):
    SUBTYPE_UNSPECIFIED = 'SUBTYPE_UNSPECIFIED'
    ADDED = 'ADDED'
    DELETED = 'DELETED'
    REPLY_ADDED = 'REPLY_ADDED'
    REPLY_DELETED = 'REPLY_DELETED'
    RESOLVED = 'RESOLVED'
    REOPENED = 'REOPENED'
    REASSIGNED = 'REASSIGNED'


class Type2(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    FLAGGED = 'FLAGGED'
    CLEARED = 'CLEARED'


class DataLeakPreventionChange(BaseModel):
    type: Optional[Type2] = Field(
        None, description='The type of Data Leak Prevention (DLP) change.'
    )


class Date(BaseModel):
    value: Optional[str] = Field(None, description='Date value.')


class Type3(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    TRASH = 'TRASH'
    PERMANENT_DELETE = 'PERMANENT_DELETE'


class Delete(BaseModel):
    type: Optional[Type3] = Field(None, description='The type of delete action taken.')


class DeletedUser(BaseModel):
    pass


class Domain(BaseModel):
    legacyId: Optional[str] = Field(
        None, description='An opaque string used to identify this domain.'
    )
    name: Optional[str] = Field(
        None, description='The name of the domain, e.g. `google.com`.'
    )


class DriveFile(BaseModel):
    pass


class Type4(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    MY_DRIVE_ROOT = 'MY_DRIVE_ROOT'
    SHARED_DRIVE_ROOT = 'SHARED_DRIVE_ROOT'
    STANDARD_FOLDER = 'STANDARD_FOLDER'


class DriveFolder(BaseModel):
    type: Optional[Type4] = Field(None, description='The type of Drive folder.')


class DriveReference(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The resource name of the shared drive. The format is `COLLECTION_ID/DRIVE_ID`. Clients should not assume a specific collection ID for this resource name.',
    )
    title: Optional[str] = Field(None, description='The title of the shared drive.')


class Edit(BaseModel):
    pass


class File(BaseModel):
    pass


class Type5(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    MY_DRIVE_ROOT = 'MY_DRIVE_ROOT'
    TEAM_DRIVE_ROOT = 'TEAM_DRIVE_ROOT'
    STANDARD_FOLDER = 'STANDARD_FOLDER'


class Folder(BaseModel):
    type: Optional[Type5] = Field(
        None,
        description='This field is deprecated; please see `DriveFolder.type` instead.',
    )


class Group(BaseModel):
    email: Optional[str] = Field(None, description='The email address of the group.')
    title: Optional[str] = Field(None, description='The title of the group.')


class Integer(BaseModel):
    value: Optional[str] = Field(None, description='Integer value.')


class KnownUser(BaseModel):
    isCurrentUser: Optional[bool] = Field(
        None, description='True if this is the user making the request.'
    )
    personName: Optional[str] = Field(
        None,
        description='The identifier for this user that can be used with the People API to get more information. The format is `people/ACCOUNT_ID`. See https://developers.google.com/people/.',
    )


class Legacy(BaseModel):
    pass


class New(BaseModel):
    pass


class NoConsolidation(BaseModel):
    pass


class Role(Enum):
    ROLE_UNSPECIFIED = 'ROLE_UNSPECIFIED'
    OWNER = 'OWNER'
    ORGANIZER = 'ORGANIZER'
    FILE_ORGANIZER = 'FILE_ORGANIZER'
    EDITOR = 'EDITOR'
    COMMENTER = 'COMMENTER'
    VIEWER = 'VIEWER'
    PUBLISHED_VIEWER = 'PUBLISHED_VIEWER'


class Subtype1(Enum):
    SUBTYPE_UNSPECIFIED = 'SUBTYPE_UNSPECIFIED'
    ADDED = 'ADDED'
    DELETED = 'DELETED'
    REPLY_ADDED = 'REPLY_ADDED'
    REPLY_DELETED = 'REPLY_DELETED'
    RESOLVED = 'RESOLVED'
    REOPENED = 'REOPENED'


class Post(BaseModel):
    subtype: Optional[Subtype1] = Field(None, description='The sub-type of this event.')


class Rename(BaseModel):
    newTitle: Optional[str] = Field(
        None, description='The new title of the drive object.'
    )
    oldTitle: Optional[str] = Field(
        None, description='The previous title of the drive object.'
    )


class Type6(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    UNTRASH = 'UNTRASH'


class Restore(BaseModel):
    type: Optional[Type6] = Field(None, description='The type of restore action taken.')


class Feature(Enum):
    FEATURE_UNSPECIFIED = 'FEATURE_UNSPECIFIED'
    SHARING_OUTSIDE_DOMAIN = 'SHARING_OUTSIDE_DOMAIN'
    DIRECT_SHARING = 'DIRECT_SHARING'
    ITEM_DUPLICATION = 'ITEM_DUPLICATION'
    DRIVE_FILE_STREAM = 'DRIVE_FILE_STREAM'
    FILE_ORGANIZER_CAN_SHARE_FOLDERS = 'FILE_ORGANIZER_CAN_SHARE_FOLDERS'


class NewRestriction(Enum):
    RESTRICTION_UNSPECIFIED = 'RESTRICTION_UNSPECIFIED'
    UNRESTRICTED = 'UNRESTRICTED'
    FULLY_RESTRICTED = 'FULLY_RESTRICTED'


class RestrictionChange(BaseModel):
    feature: Optional[Feature] = Field(
        None, description='The feature which had a change in restriction policy.'
    )
    newRestriction: Optional[NewRestriction] = Field(
        None, description='The restriction in place after the change.'
    )


class Selection(BaseModel):
    displayName: Optional[str] = Field(
        None, description='Selection value as human-readable display string.'
    )
    value: Optional[str] = Field(
        None, description='Selection value as Field Choice ID.'
    )


class SelectionList(BaseModel):
    values: Optional[List[Selection]] = Field(None, description='Selection values.')


class SettingsChange(BaseModel):
    restrictionChanges: Optional[List[RestrictionChange]] = Field(
        None, description='The set of changes made to restrictions.'
    )


class SingleUser(BaseModel):
    value: Optional[str] = Field(None, description='User value as email.')


class Subtype2(Enum):
    SUBTYPE_UNSPECIFIED = 'SUBTYPE_UNSPECIFIED'
    ADDED = 'ADDED'
    DELETED = 'DELETED'
    REPLY_ADDED = 'REPLY_ADDED'
    REPLY_DELETED = 'REPLY_DELETED'
    ACCEPTED = 'ACCEPTED'
    REJECTED = 'REJECTED'
    ACCEPT_DELETED = 'ACCEPT_DELETED'
    REJECT_DELETED = 'REJECT_DELETED'


class Suggestion(BaseModel):
    subtype: Optional[Subtype2] = Field(None, description='The sub-type of this event.')


class Type7(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    USER_DELETION = 'USER_DELETION'
    TRASH_AUTO_PURGE = 'TRASH_AUTO_PURGE'


class SystemEvent(BaseModel):
    type: Optional[Type7] = Field(
        None, description='The type of the system event that may triggered activity.'
    )


class TeamDriveReference(BaseModel):
    name: Optional[str] = Field(
        None,
        description='This field is deprecated; please see `DriveReference.name` instead.',
    )
    title: Optional[str] = Field(
        None,
        description='This field is deprecated; please see `DriveReference.title` instead.',
    )


class Text(BaseModel):
    value: Optional[str] = Field(None, description='Value of Text Field.')


class TextList(BaseModel):
    values: Optional[List[Text]] = Field(None, description='Text values.')


class TimeRange(BaseModel):
    endTime: Optional[str] = Field(None, description='The end of the time range.')
    startTime: Optional[str] = Field(None, description='The start of the time range.')


class UnknownUser(BaseModel):
    pass


class Upload(BaseModel):
    pass


class User(BaseModel):
    deletedUser: Optional[DeletedUser] = Field(
        None, description='A user whose account has since been deleted.'
    )
    knownUser: Optional[KnownUser] = Field(None, description='A known user.')
    unknownUser: Optional[UnknownUser] = Field(
        None, description='A user about whom nothing is currently known.'
    )


class UserList(BaseModel):
    values: Optional[List[SingleUser]] = Field(None, description='User values.')


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class Assignment(BaseModel):
    assignedUser: Optional[User] = Field(
        None, description='The user to whom the comment was assigned.'
    )
    subtype: Optional[Subtype] = Field(None, description='The sub-type of this event.')


class Comment(BaseModel):
    assignment: Optional[Assignment] = Field(
        None, description='A change on an assignment.'
    )
    mentionedUsers: Optional[List[User]] = Field(
        None, description='Users who are mentioned in this comment.'
    )
    post: Optional[Post] = Field(
        None, description='A change on a regular posted comment.'
    )
    suggestion: Optional[Suggestion] = Field(
        None, description='A change on a suggestion.'
    )


class ConsolidationStrategy(BaseModel):
    legacy: Optional[Legacy] = Field(
        None,
        description='The individual activities are consolidated using the legacy strategy.',
    )
    none: Optional[NoConsolidation] = Field(
        None, description='The individual activities are not consolidated.'
    )


class DriveItemReference(BaseModel):
    driveFile: Optional[DriveFile] = Field(
        None, description='The Drive item is a file.'
    )
    driveFolder: Optional[DriveFolder] = Field(
        None,
        description='The Drive item is a folder. Includes information about the type of folder.',
    )
    file: Optional[File] = Field(
        None,
        description='This field is deprecated; please use the `driveFile` field instead.',
    )
    folder: Optional[Folder] = Field(
        None,
        description='This field is deprecated; please use the `driveFolder` field instead.',
    )
    name: Optional[str] = Field(
        None, description='The target Drive item. The format is `items/ITEM_ID`.'
    )
    title: Optional[str] = Field(None, description='The title of the Drive item.')


class FieldValue(BaseModel):
    date: Optional[Date] = Field(None, description='Date Field value.')
    integer: Optional[Integer] = Field(None, description='Integer Field value.')
    selection: Optional[Selection] = Field(None, description='Selection Field value.')
    selectionList: Optional[SelectionList] = Field(
        None, description='Selection List Field value.'
    )
    text: Optional[Text] = Field(None, description='Text Field value.')
    textList: Optional[TextList] = Field(None, description='Text List Field value.')
    user: Optional[SingleUser] = Field(None, description='User Field value.')
    userList: Optional[UserList] = Field(None, description='User List Field value.')


class FieldValueChange(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The human-readable display name for this field.'
    )
    fieldId: Optional[str] = Field(
        None, description='The ID of this field. Field IDs are unique within a Label.'
    )
    newValue: Optional[FieldValue] = Field(
        None,
        description='The value that is now set on the field. If not present, the field was cleared. At least one of {old_value|new_value} is always set.',
    )
    oldValue: Optional[FieldValue] = Field(
        None,
        description='The value that was previously set on the field. If not present, the field was newly set. At least one of {old_value|new_value} is always set.',
    )


class Impersonation(BaseModel):
    impersonatedUser: Optional[User] = Field(None, description='The impersonated user.')


class Owner(BaseModel):
    domain: Optional[Domain] = Field(
        None, description='The domain of the Drive item owner.'
    )
    drive: Optional[DriveReference] = Field(
        None, description='The drive that owns the item.'
    )
    teamDrive: Optional[TeamDriveReference] = Field(
        None,
        description='This field is deprecated; please use the `drive` field instead.',
    )
    user: Optional[User] = Field(None, description='The user that owns the Drive item.')


class Permission(BaseModel):
    allowDiscovery: Optional[bool] = Field(
        None,
        description='If true, the item can be discovered (e.g. in the user\'s "Shared with me" collection) without needing a link to the item.',
    )
    anyone: Optional[Anyone] = Field(
        None,
        description='If set, this permission applies to anyone, even logged out users.',
    )
    domain: Optional[Domain] = Field(
        None, description='The domain to whom this permission applies.'
    )
    group: Optional[Group] = Field(
        None, description='The group to whom this permission applies.'
    )
    role: Optional[Role] = Field(
        None,
        description="Indicates the [Google Drive permissions role](https://developers.google.com/drive/web/manage-sharing#roles). The role determines a user's ability to read, write, and comment on items.",
    )
    user: Optional[User] = Field(
        None, description='The user to whom this permission applies.'
    )


class PermissionChange(BaseModel):
    addedPermissions: Optional[List[Permission]] = Field(
        None, description='The set of permissions added by this change.'
    )
    removedPermissions: Optional[List[Permission]] = Field(
        None, description='The set of permissions removed by this change.'
    )


class QueryDriveActivityRequest(BaseModel):
    ancestorName: Optional[str] = Field(
        None,
        description='Return activities for this Drive folder, plus all children and descendants. The format is `items/ITEM_ID`.',
    )
    consolidationStrategy: Optional[ConsolidationStrategy] = Field(
        None,
        description="Details on how to consolidate related actions that make up the activity. If not set, then related actions aren't consolidated.",
    )
    filter: Optional[str] = Field(
        None,
        description='The filtering for items returned from this query request. The format of the filter string is a sequence of expressions, joined by an optional "AND", where each expression is of the form "field operator value". Supported fields: - `time`: Uses numerical operators on date values either in terms of milliseconds since Jan 1, 1970 or in RFC 3339 format. Examples: - `time > 1452409200000 AND time <= 1492812924310` - `time >= "2016-01-10T01:02:03-05:00"` - `detail.action_detail_case`: Uses the "has" operator (:) and either a singular value or a list of allowed action types enclosed in parentheses, separated by a space. To exclude a result from the response, prepend a hyphen (`-`) to the beginning of the filter string. Examples: - `detail.action_detail_case:RENAME` - `detail.action_detail_case:(CREATE RESTORE)` - `-detail.action_detail_case:MOVE` ',
    )
    itemName: Optional[str] = Field(
        None,
        description='Return activities for this Drive item. The format is `items/ITEM_ID`.',
    )
    pageSize: Optional[int] = Field(
        None,
        description='The minimum number of activities desired in the response; the server attempts to return at least this quantity. The server may also return fewer activities if it has a partial response ready before the request times out. If not set, a default value is used.',
    )
    pageToken: Optional[str] = Field(
        None,
        description='The token identifies which page of results to return. Set this to the next_page_token value returned from a previous query to obtain the following page of results. If not set, the first page of results is returned.',
    )


class TargetReference(BaseModel):
    drive: Optional[DriveReference] = Field(
        None, description='The target is a shared drive.'
    )
    driveItem: Optional[DriveItemReference] = Field(
        None, description='The target is a Drive item.'
    )
    teamDrive: Optional[TeamDriveReference] = Field(
        None,
        description='This field is deprecated; please use the `drive` field instead.',
    )


class Actor(BaseModel):
    administrator: Optional[Administrator] = Field(
        None, description='An administrator.'
    )
    anonymous: Optional[AnonymousUser] = Field(None, description='An anonymous user.')
    impersonation: Optional[Impersonation] = Field(
        None, description='An account acting on behalf of another.'
    )
    system: Optional[SystemEvent] = Field(
        None, description='A non-user actor (i.e. system triggered).'
    )
    user: Optional[User] = Field(None, description='An end user.')


class AppliedLabelChangeDetail(BaseModel):
    fieldChanges: Optional[List[FieldValueChange]] = Field(
        None,
        description='Field Changes. Only present if `types` contains `LABEL_FIELD_VALUE_CHANGED`.',
    )
    label: Optional[str] = Field(
        None,
        description='The Label name representing the Label that changed. This name always contains the revision of the Label that was used when this Action occurred. The format is `labels/id@revision`.',
    )
    title: Optional[str] = Field(
        None, description='The human-readable title of the label that changed.'
    )
    types: Optional[List[Type1]] = Field(
        None, description='The types of changes made to the Label on the Target.'
    )


class Copy(BaseModel):
    originalObject: Optional[TargetReference] = Field(
        None, description='The original object.'
    )


class Create(BaseModel):
    copy_: Optional[Copy] = Field(
        None,
        alias='copy',
        description='If present, indicates the object was created by copying an existing Drive object.',
    )
    new: Optional[New] = Field(
        None,
        description='If present, indicates the object was newly created (e.g. as a blank document), not derived from a Drive object or external object.',
    )
    upload: Optional[Upload] = Field(
        None,
        description='If present, indicates the object originated externally and was uploaded to Drive.',
    )


class DriveItem(BaseModel):
    driveFile: Optional[DriveFile] = Field(
        None, description='The Drive item is a file.'
    )
    driveFolder: Optional[DriveFolder] = Field(
        None,
        description='The Drive item is a folder. Includes information about the type of folder.',
    )
    file: Optional[File] = Field(
        None,
        description='This field is deprecated; please use the `driveFile` field instead.',
    )
    folder: Optional[Folder] = Field(
        None,
        description='This field is deprecated; please use the `driveFolder` field instead.',
    )
    mimeType: Optional[str] = Field(
        None,
        description='The MIME type of the Drive item. See https://developers.google.com/drive/v3/web/mime-types.',
    )
    name: Optional[str] = Field(
        None, description='The target Drive item. The format is `items/ITEM_ID`.'
    )
    owner: Optional[Owner] = Field(
        None, description='Information about the owner of this Drive item.'
    )
    title: Optional[str] = Field(None, description='The title of the Drive item.')


class FileComment(BaseModel):
    legacyCommentId: Optional[str] = Field(
        None,
        description='The comment in the discussion thread. This identifier is an opaque string compatible with the Drive API; see https://developers.google.com/drive/v3/reference/comments/get',
    )
    legacyDiscussionId: Optional[str] = Field(
        None,
        description='The discussion thread to which the comment was added. This identifier is an opaque string compatible with the Drive API and references the first comment in a discussion; see https://developers.google.com/drive/v3/reference/comments/get',
    )
    linkToDiscussion: Optional[str] = Field(
        None,
        description='The link to the discussion thread containing this comment, for example, `https://docs.google.com/DOCUMENT_ID/edit?disco=THREAD_ID`.',
    )
    parent: Optional[DriveItem] = Field(
        None, description='The Drive item containing this comment.'
    )


class Move(BaseModel):
    addedParents: Optional[List[TargetReference]] = Field(
        None, description='The added parent object(s).'
    )
    removedParents: Optional[List[TargetReference]] = Field(
        None, description='The removed parent object(s).'
    )


class TeamDrive(BaseModel):
    name: Optional[str] = Field(
        None, description='This field is deprecated; please see `Drive.name` instead.'
    )
    root: Optional[DriveItem] = Field(
        None, description='This field is deprecated; please see `Drive.root` instead.'
    )
    title: Optional[str] = Field(
        None, description='This field is deprecated; please see `Drive.title` instead.'
    )


class AppliedLabelChange(BaseModel):
    changes: Optional[List[AppliedLabelChangeDetail]] = Field(
        None, description='Changes that were made to the Label on the Target.'
    )


class Drive(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The resource name of the shared drive. The format is `COLLECTION_ID/DRIVE_ID`. Clients should not assume a specific collection ID for this resource name.',
    )
    root: Optional[DriveItem] = Field(
        None, description='The root of this shared drive.'
    )
    title: Optional[str] = Field(None, description='The title of the shared drive.')


class Target(BaseModel):
    drive: Optional[Drive] = Field(None, description='The target is a shared drive.')
    driveItem: Optional[DriveItem] = Field(
        None, description='The target is a Drive item.'
    )
    fileComment: Optional[FileComment] = Field(
        None, description='The target is a comment on a Drive file.'
    )
    teamDrive: Optional[TeamDrive] = Field(
        None,
        description='This field is deprecated; please use the `drive` field instead.',
    )


class ActionDetail(BaseModel):
    appliedLabelChange: Optional[AppliedLabelChange] = Field(
        None, description='Label was changed.'
    )
    comment: Optional[Comment] = Field(
        None, description='A change about comments was made.'
    )
    create: Optional[Create] = Field(None, description='An object was created.')
    delete: Optional[Delete] = Field(None, description='An object was deleted.')
    dlpChange: Optional[DataLeakPreventionChange] = Field(
        None, description='A change happened in data leak prevention status.'
    )
    edit: Optional[Edit] = Field(None, description='An object was edited.')
    move: Optional[Move] = Field(None, description='An object was moved.')
    permissionChange: Optional[PermissionChange] = Field(
        None, description='The permission on an object was changed.'
    )
    reference: Optional[ApplicationReference] = Field(
        None,
        description='An object was referenced in an application outside of Drive/Docs.',
    )
    rename: Optional[Rename] = Field(None, description='An object was renamed.')
    restore: Optional[Restore] = Field(
        None, description='A deleted object was restored.'
    )
    settingsChange: Optional[SettingsChange] = Field(
        None, description='Settings were changed.'
    )


class Action(BaseModel):
    actor: Optional[Actor] = Field(
        None,
        description='The actor responsible for this action (or empty if all actors are responsible).',
    )
    detail: Optional[ActionDetail] = Field(
        None, description='The type and detailed information about the action.'
    )
    target: Optional[Target] = Field(
        None,
        description='The target this action affects (or empty if affecting all targets). This represents the state of the target immediately after this action occurred.',
    )
    timeRange: Optional[TimeRange] = Field(
        None, description='The action occurred over this time range.'
    )
    timestamp: Optional[str] = Field(
        None, description='The action occurred at this specific time.'
    )


class DriveActivity(BaseModel):
    actions: Optional[List[Action]] = Field(
        None, description='Details on all actions in this activity.'
    )
    actors: Optional[List[Actor]] = Field(
        None, description='All actor(s) responsible for the activity.'
    )
    primaryActionDetail: Optional[ActionDetail] = Field(
        None,
        description='Key information about the primary action for this activity. This is either representative, or the most important, of all actions in the activity, according to the ConsolidationStrategy in the request.',
    )
    targets: Optional[List[Target]] = Field(
        None,
        description='All Google Drive objects this activity is about (e.g. file, folder, drive). This represents the state of the target immediately after the actions occurred.',
    )
    timeRange: Optional[TimeRange] = Field(
        None, description='The activity occurred over this time range.'
    )
    timestamp: Optional[str] = Field(
        None, description='The activity occurred at this specific time.'
    )


class QueryDriveActivityResponse(BaseModel):
    activities: Optional[List[DriveActivity]] = Field(
        None, description='List of activity requested.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
